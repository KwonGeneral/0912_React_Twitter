{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","firebaseInstance","dbService","firestore","storageService","storage","AuthForm","useState","email","set_email","password","set_password","newAccount","set_newAccount","error","set_error","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Tweet","tweetObj","isOwner","editing","set_editing","text","newTweet","set_newTweet","toggleEditing","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","update","src","width","height","TweetFactory","userObj","tweet","set_tweet","attachment","set_attachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","tweets","set_tweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","Navigation","to","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLogin","exact","path","App","init","set_init","set_userObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f9b0494f.chunk.js","sourcesContent":["\r\nimport firebase from \"firebase/compat\";\r\nimport \"firebase/auth\"\r\n\r\n// 파이어베이스 데이터베이스\r\nimport \"firebase/firestore\"\r\n\r\n// 파이어베이스 저장소\r\nimport \"firebase/storage\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\n// export default firebase.initializeApp(firebaseConfig)\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const authService = firebase.auth();\r\n\r\n// 소셜 로그인 기능 : 위의 auth 함수에는 소셜 로그인에 필요한 provider가 없다.\r\nexport const firebaseInstance = firebase;\r\n\r\n// 파이어베이스 데이터베이스\r\nexport const dbService = firebase.firestore();\r\n\r\n// 파이어베이스 저장소\r\nexport const storageService = firebase.storage();\r\n\r\n\r\n\r\n\r\n","import {useState} from \"react\";\r\nimport {authService} from \"../fbase\";\r\n\r\nconst AuthForm = () => {\r\n    const [email, set_email] = useState(\"\");\r\n    const [password, set_password] = useState(\"\");\r\n    const [newAccount, set_newAccount] = useState(true);\r\n    const [error, set_error] = useState(\"\");\r\n    const toggleAccount = () => set_newAccount((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n        // console.log(event.target.name);\r\n        const { target : { name, value } } = event;\r\n        if(name === \"email\") {\r\n            set_email(value);\r\n        } else if(name === \"password\") {\r\n            set_password(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n\r\n            if(newAccount) {\r\n                data = await authService.createUserWithEmailAndPassword(email, password)\r\n            } else {\r\n                data = await authService.signInWithEmailAndPassword(email, password)\r\n            }\r\n            console.log(\"데이터 : \", data);\r\n        } catch (error) {\r\n            // console.log(\"에러 : \", error)\r\n            set_error(error.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={ onSubmit }>\r\n                <input name=\"email\" value={ email } onChange={ onChange } type=\"email\" placeholder=\"이메일\" required/>\r\n                <input name=\"password\" value={ password } onChange={ onChange } type=\"password\" placeholder=\"비밀번호\" required/>\r\n                <input type=\"submit\" value={ newAccount ? \"회원가입\" : \"로그인\" } required/>\r\n                { error }\r\n            </form>\r\n            <span onClick={ toggleAccount }>\r\n                { newAccount ? \"로그인\" : \"회원가입\" }\r\n            </span>\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default AuthForm;","\r\nimport { useState } from \"react\";\r\nimport { authService, firebaseInstance } from \"../fbase\";\r\nimport AuthForm from \"../components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n\r\n    // 소셜 로그인 기능 : 구글, 깃허브 등등 소셜 로그인 목표 확인\r\n    const onSocialClick = async (event) => {\r\n        // console.log(event.target.name);\r\n\r\n        let provider;\r\n        const { target: { name } } = event;\r\n\r\n        if(name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if(name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider);\r\n        console.log(\"onSocialClick data : \", data)\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AuthForm />\r\n            <div>\r\n                <button onClick={ onSocialClick } name=\"google\">구글 로그인</button>\r\n                <button onClick={ onSocialClick } name=\"github\">깃허브 로그인</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n\r\n","\r\nimport {dbService, storageService} from \"../fbase\";\r\nimport { useState } from \"react\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n    const [editing, set_editing] = useState(false);\r\n    const [newTweet, set_newTweet] = useState(tweetObj.text);\r\n\r\n    const toggleEditing = () => set_editing((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event;\r\n        set_newTweet(value);\r\n    }\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"삭제하시겠습니까?\");\r\n        // console.log(\"ok : \", ok)\r\n        if(ok) {\r\n            // console.log(\"tweetObj.id : \", tweetObj.id);\r\n            await dbService.doc(`tweets/${tweetObj.id}`).delete() // 작은 따옴표가 아닌 1 옆의 백틱\r\n            // console.log(\"onDeleteClick data : \", data)\r\n            if(tweetObj.attachmentUrl !== \"\") {\r\n                await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        // console.log(\"tweetObj.id, newTweet : \", tweetObj.id, newTweet)\r\n        await dbService.doc(`tweets/${tweetObj.id}`).update({ text: newTweet });\r\n        set_editing(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { editing ? (\r\n                <>\r\n                    <form onSubmit={ onSubmit }>\r\n                        <input onChange={ onChange } value={ newTweet } required />\r\n                        <input type=\"submit\" value=\"수정하기\" />\r\n                    </form>\r\n                    <button onClick={ toggleEditing }>취소</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4>{ tweetObj.text }</h4>\r\n                    { tweetObj.attachmentUrl && (\r\n                        <img src={ tweetObj.attachmentUrl } width=\"50px\" height=\"50px\" />\r\n                    ) }\r\n                    { isOwner && (\r\n                            <>\r\n                                <button onClick={ onDeleteClick }>삭제</button>\r\n                                <button onClick={ toggleEditing }>수정</button>\r\n                            </>\r\n                        )\r\n                    }\r\n                </>\r\n            )\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Tweet;\r\n\r\n","import {dbService, storageService} from \"../fbase\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {useState} from \"react\";\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n    const [tweet, set_tweet] = useState(\"\");\r\n    const [attachment, set_attachment] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        /*\r\n        await dbService.collection(\"tweets\").add({\r\n            text: tweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n        })\r\n        set_tweet(\"\");\r\n         */\r\n\r\n        let attachmentUrl = \"\";\r\n\r\n        if(attachment !== \"\")  {\r\n            // storageService.ref().child와 같이 스토리지 레퍼런스의 함수인 child를 사용하면 폴더, 파일 이름을 설정할 수 있다.\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\r\n\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n            console.log(\"response 1 : \", response);\r\n            console.log(\"response 2 : \", await response.ref.getDownloadURL());\r\n        }\r\n\r\n        await dbService.collection(\"tweets\").add({\r\n            text: tweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl\r\n        })\r\n        set_tweet(\"\");\r\n        set_attachment(\"\");\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        event.preventDefault();\r\n        const { target: { value } } = event;\r\n\r\n        set_tweet(value);\r\n    }\r\n\r\n    const onFileChange = (event) => {\r\n        // console.log(event.target.files);\r\n        const { target: { files } } = event;  // files = event.target.files\r\n        const theFile = files[0]\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = (finishedEvent) => {\r\n            // console.log(finishedEvent);\r\n            const { currentTarget : { result } } = finishedEvent  // result = finishedEvent.currentTarget.result\r\n            set_attachment(result);\r\n        };\r\n\r\n        // readAsDataURL 함수는 파일 정보를 인자로 받아서 파일 위치를 URL로 반환해 준다.\r\n        // 이ㅏ 함수는 리액트 생명주기 함수처럼 파일 선택 후, '웹 브라우저가 파일을 인식하는 시점', '웹 브라우저 파일 인식이 끝난 시점' 등을\r\n        // 포함하고 있어서 시점까지 함께 관리해줘야 URL을 얻을 수 있다.\r\n        reader.readAsDataURL(theFile)\r\n    };\r\n\r\n    // 파일 취소\r\n    const onClearAttachment = () => set_attachment(\"\");\r\n\r\n    return (\r\n        <form onSubmit={ onSubmit }>\r\n            <input type=\"text\" value={ tweet } onChange={ onChange } placeholder=\"당신의 생각은?\" maxLength={ 120 } />\r\n            <input type=\"file\" accept=\"image/*\" onChange={ onFileChange } />\r\n            <input type=\"submit\" value=\"Tweet\"/>\r\n            { attachment && (\r\n                <div>\r\n                    <img src={ attachment } width=\"50px\" height=\"50px\" />\r\n                    <button onClick={ onClearAttachment }>초기화</button>\r\n                </div>\r\n            )}\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default TweetFactory;","\r\nimport {useEffect, useState} from \"react\";\r\nimport { dbService, storageService } from \"../fbase\";\r\nimport Tweet from \"../components/Tweet\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport TweetFactory from \"../components/TweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n    // console.log(\"Home userObj : \", userObj)\r\n    const [tweets, set_tweets] = useState([]);\r\n\r\n    // const getTweets = async () => {\r\n    //     const dbTweets = await dbService.collection(\"tweets\").get();\r\n    //     // dbTweets.forEach((document) => console.log(\"document.data() : \", document.data()))\r\n    //     // dbTweets.forEach((document) => set_tweets((prev) => [document.data(), ...prev]))\r\n    //     dbTweets.forEach((document) => {\r\n    //         const tweetObject = { ...document.data(), id: document.id };\r\n    //         set_tweets((prev) => [tweetObject, ...prev])\r\n    //     })\r\n    // }\r\n\r\n    useEffect(() => {\r\n        // onSnapshot 함수도 get 함수와 마찬가지로 스냅샷을 반환한다.\r\n        // 스냅샷에는 문서 스냅샷들이 포함되어 있는데, 문서 스냅샷들은 snapshot.docs와 같이 얻어낼 수 있다.\r\n        // 여기에 map 함수를 적용해서 문서 스냅샷에서 원하는 값만 뽑아서 다시 배열화 할 수 있다.\r\n        // forEach 함수는 배열 요소를 순회하면서 매 순회마다 set_tweets 함수를 사용해야 하지만,\r\n        // map 함수는 순회하며 만든 배열을 반환하므로 반환한 배열을 1번만 set_tweets 함수에 전달하면 되니 훨씬 효율적이다.\r\n        dbService.collection(\"tweets\").onSnapshot((snapshot => {\r\n            const newArray = snapshot.docs.map((document) => ({\r\n                id: document.id, ...document.data()\r\n            }));\r\n            set_tweets(newArray)\r\n        }))\r\n    }, [])\r\n    // console.log(\"tweets : \", tweets);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <TweetFactory userObj={ userObj } />\r\n            <div>\r\n                { tweets.map((tweet) => (\r\n                    // <div key={ tweet.id }>\r\n                    //     <h4>{ tweet.text }</h4>\r\n                    // </div>\r\n                    <Tweet key={ tweet.id } tweetObj={ tweet } isOwner={ tweet.creatorId === userObj.uid } />\r\n                )) }\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n","\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li> <Link to=\"/\">홈</Link> </li>\r\n                { userObj.displayName !== null ?\r\n                    <li> <Link to=\"/profile\">{ userObj.displayName }의 마이페이지</Link> </li> :\r\n                    <li> <Link to=\"/profile\">마이페이지</Link> </li>}\r\n            </ul>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Navigation;\r\n\r\n","\r\nimport {authService, dbService} from \"../fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName != null ? userObj.displayName : \"\");\r\n\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({ displayName: newDisplayName });\r\n            refreshUser();\r\n        }\r\n    };\r\n\r\n    /*\r\n    const getMyTweets = async () => {\r\n        const tweets = await dbService\r\n                        .collection(\"tweets\")\r\n                        .where(\"creatorId\", \"==\", userObj.uid)\r\n                        .orderBy(\"createdAt\", \"asc\")\r\n                        .get();\r\n        \r\n        console.log(tweets.docs.map((doc) => doc.data()))\r\n    };\r\n     */\r\n    \r\n    // Profile 컴포넌트가 렌더링 된 이후, 실행 될 함수 ( useEffect )\r\n    useEffect(() => {\r\n        // getMyTweets();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={ onSubmit }>\r\n                <input type=\"text\" placeholder=\"닉네임\" onChange={ onChange } value={ newDisplayName } />\r\n                <input type=\"submit\" value=\"프로필 수정\" />\r\n            </form>\r\n            <button onClick={ onLogOutClick }>로그아웃</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import { HashRouter as Router, Route, Switch, Redirect } from \"react-router-dom\"\r\nimport { useState } from \"react\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\nimport Profile from \"../routes/Profile\";\r\n\r\n\r\n// Switch를 사용하면 여러가지 라우터 중 하나만 렌더링할 수 있게 해준다.\r\n// 특정 작업 후, 페이지 이동은 Redirect나 history.push를 사용한다.\r\nconst AppRouter = ({ isLogin, userObj, refreshUser }) => {\r\n    return (\r\n        <Router>\r\n            { isLogin && <Navigation userObj={ userObj } /> }\r\n            <Switch>\r\n                { isLogin ? (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={ userObj } />\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile userObj={ userObj } refreshUser={ refreshUser } />\r\n                        </Route>\r\n                    </>\r\n                ) : (\r\n                    <Route exact path=\"/\">\r\n                        <Auth />\r\n                    </Route>\r\n                ) }\r\n\r\n                {/*<Redirect from=\"*\" to=\"/\" />*/}\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;\r\n\r\n\r\n","import {useEffect, useState} from \"react\";\nimport React from \"react\";\n// import AppRouter from \"components/Router\";\nimport AppRouter from \"./Router\";\nimport { authService } from \"../fbase\";\n\n\nfunction App() {\n    const [init, set_init] = useState(false);\n    // const [isLogin, set_isLogin] = useState(false);\n    const [userObj, set_userObj] = useState(null);\n\n    // console.log(authService.currentUser)\n    // setTimeout(() => console.log(authService.currentUser), 2000);\n    useEffect(() => {\n        // authService.onAuthStateChanged((user) => console.log(user));\n        authService.onAuthStateChanged((user) => {\n            if(user) {\n                // set_isLogin(user);\n                set_userObj({\n                    uid: user.uid,\n                    displayName: user.displayName,\n                    updateProfile: (args) => user.updateProfile(args)\n                });\n            } else {\n                // set_isLogin(false);\n                set_userObj(false);\n            }\n            set_init(true);\n        });\n    }, []);\n\n    const refreshUser = () => {\n        // set_userObj(authService.currentUser);\n        const user = authService.currentUser;\n        set_userObj({\n            uid: user.uid,\n            displayName: user.displayName,\n            updateProfile: (args) => user.updateProfile(args)\n        })\n    };\n\n    return (\n        <>\n            { init ? ( <AppRouter isLogin={ Boolean(userObj) } userObj={ userObj } refreshUser={ refreshUser } /> ) : ( \"초기화중...\" ) }\n            {/*{ init ? ( <AppRouter isLogin={ isLogin } userObj={ userObj } refreshUser={ refreshUser } /> ) : ( \"초기화중...\" ) }*/}\n        {/*<footer>&copy; {new Date().getFullYear()} Twitter</footer>*/}\n        </>\n    );\n}\n\n// 구조 분해 할당\n// function App({ isLogin }) {\n//   return (\n//       <>\n//         <AppRouter isLogin={ isLogin } />\n//         <footer>&copy; {new Date().getFullYear()} Twitter</footer>\n//       </>\n//   );\n// }\n\n// 기존 방법\n// function App() {\n//   const [isLogin, set_isLogin] = useState(false);\n//   return (\n//       <>\n//         <AppRouter isLogin={ isLogin } />\n//         <footer>&copy; {new Date().getFullYear()} Twitter</footer>\n//       </>\n//   );\n// }\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n// import firebase from \"firebase/compat\";\nimport firebase from \"./fbase\";\n// console.log(firebase)\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n"],"sourceRoot":""}